alias currentPID S0;
alias currentPCB S1;
currentPID=(PTBR-32256)/10;
currentPCB = READY_LIST + 32 * currentPID;
[ currentPCB + 1 ] = 1;
[ currentPCB + 2 ] = BP;
[ currentPCB + 3 ] = SP - 1;	

alias physicalSP S2;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

[ currentPCB + 4 ] = [ physicalSP ]; // Save IP of current process in the PCB from the stack

[ currentPCB + 5 ] = PTBR;
[ currentPCB + 6 ] = 5;	
[ currentPCB + 7 ] = R0;
[ currentPCB + 8 ] = R1;
[ currentPCB + 9 ] = R2;
[ currentPCB + 10 ] = R3;
[ currentPCB + 11] = R4;
[ currentPCB + 12] = R5;
[ currentPCB + 13 ] = R6;
[ currentPCB + 14 ] = R7;

alias temp S5;
temp=(currentPID+1)%32;

while([1536+(32*temp)+1]!=1) 
do
temp=(temp+1)%32;
endwhile;

currentPID=temp;

alias newPCB S6;
newPCB=READY_LIST + 32 * currentPID;

PTLR=5;
SP = [newPCB+3] + 1;
PTBR=[newPCB+5];
BP=[newPCB+2];
R0=[newPCB+7];
R1=[newPCB+8];
R2=[newPCB+9];
R3=[newPCB+10];
R4=[newPCB+11];
R5=[newPCB+12];
R6=[newPCB+13];
R7=[newPCB+14];


alias newphysicalSP S2; 
newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); 
[ newphysicalSP ] = [ newPCB + 4 ]; // Stores IP field value of PCB on the stack 

[newPCB+1]=2;

ireturn;

