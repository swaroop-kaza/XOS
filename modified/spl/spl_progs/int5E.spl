
alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

alias currentPCB S2;
currentPCB = READY_LIST + 32 * ((PTBR - 32256) / 10);	

	alias currentPID S6;
	currentPID = (PTBR-32256)/10;

if(sysCallNo == 8) then  							 //////////////FORK

	alias counter S3;
	alias childPID S4;
	counter = (currentPID+1)%32;
	while(counter != currentPID) do
		if([READY_LIST + 32*counter + 1] == 0) then
			childPID = counter;
			[READY_LIST + 32*childPID] = counter;
			break;
		endif;
		counter = (counter +1)%32;
	endwhile;
breakpoint;

	if(counter == currentPID) then
		[physicalSP-2] = -1;
		ireturn;
	endif;

breakpoint;

	alias i S5;
	alias childPTBR S7;
	alias childPCB S11;
	childPTBR = 32256 + (10*childPID);
	childPCB = READY_LIST + 32*childPID;

	alias validPageCount S10;

	counter = 2;
	while(counter<63) do
		if([1280 + counter] == 0) then
			break;
		endif;
		counter  = counter+1;
	endwhile;    											////STACK PAGE CHECK FOR AVAILABILITY
breakpoint;

	

	alias j S9;
	alias swapPageIndex S13;
	alias freePageIndex S14;
	if(counter == 64) then

		i = PTBR - 32256;
		j = i%256;
		while(1) do
			j = (i+2)%256;
			while (i!=j) do
				if (j % 10 == 8) then
					j = (j + 2) % 256;
					continue;
				endif;

				if ([32256 + j + 1] == "01") then
					
					if ([MEM_LIST + [32256 + j]] > 1) then					// page is shared	
						j = (j + 2)%256;
						continue;
					endif;
					

					
					swapPageIndex = 448;
					while (swapPageIndex < 512) do
						
						if ([DISK_LIST + swapPageIndex] == 0) then
							
							store([32256 + j], swapPageIndex);
							[DISK_LIST + swapPageIndex] = 1; 
							freePageIndex = [32256 + j];
							[32256 + j] = swapPageIndex;
							[32256 + j + 1] = "00";
							
							break;						
						endif;
						
						swapPageIndex = swapPageIndex + 1;
					endwhile;
						
					if (swapPageIndex == 512) then
						SP = SP + 1;
						[physicalSP] = 10;
						inline "JMP 11776";
					endif;
					
					if (swapPageIndex != 512) then
						break;
					endif;					
						
				endif;
				
				if ([32256 + j + 1] == "11") then
					[32256 + j + 1] = "01";
				endif;
				
				j = (j + 2) % 256;		
				
			endwhile;

			if(i!=j) then
				break;
			endif;

		endwhile;	
endif;
breakpoint;

	i = 0;
	while(i<4) do

		[childPTBR + i*2] = [PTBR + i*2];
		[childPTBR + i*2 +1] = [PTBR + i*2 + 1];
		
		if([PTBR + i*2 + 1] == "01" || [PTBR + i*2 + 1] == "11") then
			[1280 + [PTBR + i*2]] = [1280 + [PTBR + i*2]] + 1;
		endif;
		
		if([PTBR + i*2 + 1] == "00" || [PTBR + i*2 + 1] == "10") then

			if([PTBR + i*2] >= 448) then
				[3072 + [PTBR + i*2]] = [3072 + [PTBR + i*2]] +1; 
			endif;

		endif;
		i = i+1;
	endwhile;	

	[1280 + counter] = 1;
	[childPTBR + 8] = counter;
	[childPTBR + 9] = "01";
	
	j=0;
	while(j<512) do
		[counter*512 +j] = [ [PTBR + 8]*512 +j];
		j = j+1;
	endwhile;							////////COPY THE STACK PAGE

	[childPCB + 1] = 1; 				///STATE
	[childPCB + 2] = BP; 				//BP
	[childPCB + 3] = SP-1;				///SP
	[childPCB + 4] = [physicalSP];  	//IP
	[childPCB + 5] = childPTBR;  		//PTBR
	[childPCB + 6] = PTLR; 				//PTLR
	[childPCB + 7] = R0;
	[childPCB + 8] = R1;
	[childPCB + 9] = R2;
	[childPCB + 10] = R3;
	[childPCB + 11] = R4;
	[childPCB + 12] = R5;
	[childPCB + 13] = R6;
	[childPCB + 14] = R7;
	[childPCB + 31] = currentPID;

	counter = 0;
	while(counter < 8) do
		[childPCB + 15 + counter*2] = [currentPCB + 15 + counter*2];
		[childPCB + 15 + counter*2 +1] = [currentPCB + 15 + counter*2 +1];
		if([childPCB + 15 + counter*2] != -1) then
			[FILE_TABLE+[childPCB + 15 + counter*2]*2 + 1] = [FILE_TABLE+[childPCB + 15 + counter*2]*2 + 1]+1; 
		endif;
		counter = counter+1;
	endwhile;

breakpoint;
	
	[physicalSP - 2] = childPID;	
	counter = ([childPTBR + 2*((SP-1) / 512)] * 512) + ((SP-1) % 512);
	[counter - 1] = -2;
		//print "here";
	ireturn;
endif;
