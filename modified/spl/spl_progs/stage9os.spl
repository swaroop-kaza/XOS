
//exhandler
load(7,1);  
load(8,2);

//interrupt1

load(11,5);
load(12,6);

//interrupt2

load(13,7);
load(14,8);

//interrupt3
load(15,9);
load(16,10);

//interrupt4

load(17,11);
load(18,12);

//interrupt5

load(19,13);
load(20,14);

//interrupt6

load(21,15);
load(22,16);

//interrupt7
load(23,17); 
load(24,18);

//FAT and DF-list
load(5,19);
load(6,20);

//timerinterrupt
load(9,3);
load(10,4);

//init program
load(25,21);	// Load 1st page of code from disk to memory

[READY_LIST + 0] = 0;

PTBR = 1024;
PTLR = 4;

[PTBR + 0] = 25; // Physical Page Number for Logical Page 0
[PTBR + 1] = "01"; // Auxiliary Information for Logical Page 0
[PTBR + 2] = 26; // Physical Page Number for Logical Page 0
[PTBR + 3] = "01"; // Auxiliary Information for Logical Page 0
[PTBR + 4] = 27; // Physical Page Number for Logical Page 0
[PTBR + 5] = "01"; // Auxiliary Information for Logical Page 0
[PTBR + 6] = 28; // Physical Page Number for Logical Page 0
[PTBR + 7] = "01"; // Auxiliary Information for Logical Page 0



alias temp S1;
alias count S2;
count=0;
temp=1280;

while(temp<=1308)
do
[temp+0]=1;
temp=temp+1;
endwhile;

while(count<32)
do
[READY_LIST+count*32+1]=0;
count=count+1;
endwhile;

[READY_LIST+1]=2;
SP = 3 * 512;
[28 * 512] = 0;

alias counter S0;			
counter = 0;
while ( counter <  128) do			// 64 entries, each of size 2 words
	[ FILE_TABLE + counter + 0] = -1;	// Set FAT Index to -1
	[ FILE_TABLE + counter + 1] =  0;	// Set File Open Count to 0
	counter = counter + 2;			// Move to next entry
endwhile;
temp=15;

while(temp<=30)
do
[READY_LIST+temp]=-1;
[READY_LIST+temp+1]=0;

temp=temp+2;
endwhile;

[READY_LIST+31]=0;

store(5,19);
store(6,20);

ireturn;






