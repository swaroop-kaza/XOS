alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

alias currentPCB S2;
currentPCB = READY_LIST + 32 * ((PTBR - (32256)) / 10);	

alias currPID S3;
currPID = (PTBR-(32256))/10;
	
alias counter S4;
alias nextPID S5;
alias i S6;
alias waitingPID S10;

											/////////// 13 ---> WAIT && 10 --> EXIT && 14 --> SIGNAL

if(sysCallNo == 13) then      							
	waitingPID = [physicalSP - 3];
	
	if([READY_LIST + 32*waitingPID + 1] == 0 || [READY_LIST + 32*waitingPID + 1] == 2) then
		[physicalSP - 2] = -1;
		ireturn;
	endif;
	[currentPCB + 1] = 100 + waitingPID;
endif;

if(sysCallNo == 10 || sysCallNo == 14) then	
											/////ALL WAITING FOR CURRENT MUST BE RESUMED
		counter = 0;
		while(counter!= 32) do
			if([READY_LIST + 32*counter + 1] == 100 + currPID) then
				[READY_LIST + 32*counter + 1] = 1;
			endif;
			counter = (counter+1);
		endwhile;

		if(sysCallNo == 14) then
			[physicalSP -2] = 0;
			ireturn;
		endif;
	
endif;

if(sysCallNo == 13 || sysCallNo == 10) then
	counter = (currPID+1)%32;
	while(counter!= currPID) do
		if([READY_LIST + 32*counter + 1] == 1) then
			nextPID = counter;
			break;
		endif;
		counter = (counter+1)%32;
	endwhile;

	if(counter == currPID) then
		halt;
	endif;

endif;

if(sysCallNo == 13) then
	
	[currentPCB + 2] = BP;
	[currentPCB + 3] = SP - 1;
	[currentPCB + 4] = [physicalSP];
	[currentPCB + 5] = PTBR;
	[currentPCB + 6] = PTLR;
	[currentPCB + 7] = R0;
	[currentPCB + 8] = R1;
	[currentPCB + 9] = R2;
	[currentPCB + 10] = R3;
	[currentPCB + 11] = R4;
	[currentPCB + 12] = R5;
	[currentPCB + 13] = R6;
	[currentPCB + 14] = R7;


endif;

if(sysCallNo == 10) then	

	[currentPCB + 1] = 0;
									///////////////CLOSE THE FILES TOO
	alias SWOFTIdx S6;
	counter = 0;
	while(counter<8) do
		SWOFTIdx = [currentPCB + 15 + counter*2];
		if(SWOFTIdx >= 0 && SWOFTIdx <= 7) then
			[FILE_TABLE + SWOFTIdx*2 + 1] = [FILE_TABLE + SWOFTIdx*2 + 1] - 1;
			if ([FILE_TABLE + SWOFTIdx*2 + 1] == 0) then
				[FILE_TABLE + SWOFTIdx*2] = -1;
			endif;
			[currentPCB + 15 + counter*2] = -1;
			[currentPCB + 15 + counter*2 + 1] = -1;
		endif;
		counter = counter+1;
	endwhile;

	[currentPCB + 1] = 0;

	counter = 0;
	while(counter<5) do

		if([PTBR + counter*2 + 1] == "01" || [PTBR + counter*2 + 1] == "11") then
			[1280 + [PTBR + counter*2]] = [1280 + [PTBR + counter*2]] - 1;
		endif;
		
		if([PTBR + counter*2 + 1] == "00" || [PTBR + counter*2 + 1] == "10") then

			if([PTBR + counter*2] >= 448) then
				[3072 + [PTBR + counter*2]] = [3072 + [PTBR + counter*2]] - 1; 
			endif;

		endif;
		
		[PTBR + counter*2 + 1] = "00";
		[PTBR + counter*2] = -1;
		counter = counter+1;
	endwhile;

endif;

if(sysCallNo == 10 || sysCallNo == 13) then

	alias var S7;
	var = READY_LIST + 32*nextPID;
	[var + 1] = 2;
	BP = [var + 2];
	SP = [var + 3];
	SP = SP + 1;
	PTBR = [var + 5];
	PTLR = [var + 6];
	R0 = [var + 7];
	R1 = [var + 8];
	R2 = [var + 9];
	R3 = [var + 10];
	R4 = [var + 11];
	R5 = [var + 12];
	R6 = [var + 13];
	R7 = [var + 14];
	physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
	[physicalSP] = [var + 4];
	breakpoint;
	ireturn;

endif;	
