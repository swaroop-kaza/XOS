alias physicalSP S0;
alias sysCallNo S1;
alias i S2;
alias newPID S3;
alias vnpag S4;
alias j S5;
alias newPTBR S6;
alias k S7;
alias l S8;
alias newPCB S9;
alias PID S10;
alias PCB S11;
alias newphySP S12;
print("INT5");
physicalSP = ([PTBR + 2*(SP/512)] * 512) + (SP%512);		//address translation of SP to get IP
								//that is to be stored
								//physical address = physical page no * 512 + offset
								//offset = sp % 512
								//physical page no = [location of pagetable + 0]
								//location of pagetable = PTBR + logical page number * 2
								//logical page number = logical address / 512
								//multiply by 2 because of 2 entries in page table

sysCallNo = [physicalSP - 1];					//storing system call number from stack

if( sysCallNo == 8) then					//code for fork
//print("1");	
	i=0;
	while( i<32 && [READY_LIST + i*32 +1]!=0 ) do		//checking for the vacant PCB
								//total 32 PCB first word of PCB is STATE
								//if STATE is 0 then PCB is vacant
		i=i+1;
	endwhile;

	if(i==32) then						//if no vacant PCB
		print "NO VACNCY IN PCB";			//corresponding message
		[physicalSP - 2] = -1;				//storing return value
		ireturn;
	endif;

	newPID = i;						//storing index of the new process
	[READY_LIST + 32*i] = i;				//setting PID of new process
//print("2");
	vnpag = 0;
	i=0;
	while( i<8 ) do						//checking for valid pages for parent process
		if( [PTBR + i] != -1 ) then			//if valid page exists
								//increase value of no of valid pages
			vnpag = vnpag + 1;
		endif;
		i=i+2;
	endwhile;
//print("3");
	j=vnpag;						//another copy of valid no of pages
	i=24;
	while( i<64 && j!=0 ) do				//checking all elements of memory free list
								//for free memory of valid no of bits
		if( [MEM_LIST + i] == 0) then
			j=j-1;
		endif;
		i=i+1;
	endwhile;

	if( j!=0 ) then						//if valid no of bits are more than free memory
		print "NO FREE MEMORY FOR DUPLICATION";		//corresponding message
		[physicalSP - 2] = -1;				//storing return value
		ireturn;
	endif;

	newPTBR = 1024 + newPID*8;				//calculating new PTBR for new process
//print("4");
	j=vnpag;						//another copy of valid no of pages
	i=24;							//since pages until 24 are already filled
	k=0;							//accessing page table for child process
	l=0;							//accessing all words of a page for child process
	while( i<64 && j!=0 ) do				//storing the memory free list
								//values to be 1 for valid no of pages
		if( [MEM_LIST + i] == 0 ) then			//checking whether memory is already filled or not
			[MEM_LIST + i] = 1;			//if not filled then use for child process 
			j=j-1;					//reduce no of valid pages

			while(k<8 && [PTBR + k] == -1) do	//if we have 2 pages including stack then 
								//by getting first free page this this is assinged to 
								//first page of child process
								//if second page is not refferd but it is assigned
								//but j should not be decresed
				[newPTBR + k] = -1;
				[newPTBR + k + 1] = "00";
				k=k+2;
			endwhile;

								//setting page table for child process
			[newPTBR + k] = i;			//physical page number
			[newPTBR + k + 1] = [PTBR + k + 1];	//auxiliary information
			l=0;
			while(l < 512) do
				[i*512 + l] = [[PTBR + k]*512 + l];	
								//coping contents of parent process to child process
								//in word by word manner
				l=l+1;
			endwhile;
			k=k+2;
		endif;
		i=i+1;
	endwhile;
//print("5");
	newPCB = READY_LIST + newPID*32;			//calculating chlid PCB from PID calculated before

								//setting PCB of child process
	[newPCB + 0] = newPID;					//setting PID
	[newPCB + 1] = 1;					//setting state
	[newPCB + 2] = BP;					//setting BP
	[newPCB + 3] = SP - 1;					//setting SP
	[newPCB + 4] = [physicalSP];				//setting IP
	[newPCB + 5] = newPTBR;					//setting PTBR
	[newPCB + 6] = PTLR;					//setting PTLR
	[newPCB + 7] = R0;					//setting program registers
	[newPCB + 8] = R1;
	[newPCB + 9] = R2;
	[newPCB + 10] = R3;
	[newPCB + 11] = R4;
	[newPCB + 12] = R5;
	[newPCB + 13] = R6;
	[newPCB + 14] = R7;
	
	PID = (PTBR - 1024)/8;					//calculating PID of parent process
	PCB = READY_LIST + PID*32;				//calculating PCB of parent process
//print("6");

	i=15;							//since per process open file table 
								//starts from 15 and ends at 32
	while( i<31 ) do
		[newPCB + i] = [PCB + i];			//coping per process open file table of 
								//parent process to child process
		[newPCB + i + 1] = [PCB + i + 1];	 	//storing LSEEK of per process open file table
		if( [PCB + i] != -1) then			//some file opend by the parent process
								//then file entry has to be increased in
								//system wide open file table
			[FILE_TABLE + 2*[PCB + i] + 1] = [FILE_TABLE + 2*[PCB + i] + 1] +1;
		endif;
		i=i+2;
	endwhile;
breakpoint;
	[newPCB + 31] = [PCB + 0];				//setting parent pid value in PCB of new process
	[physicalSP - 2] = newPID;				//setting return value for parent process
	
	newphySP = ([newPTBR + 2*((SP-1)/512)] * 512) + ((SP-1)%512);   
								//address translation of SP to get IP
                                                                //that is to be stored
                                                                //physical address = physical page no * 512 + offset
                                                                //offset = sp % 512
                                                                //physical page no = [location of pagetable + 0]
                                                                //location of pagetable = PTBR + logical page number * 2
                                                                //logical page number = logical address / 512
                                                                //multiply by 2 because of 2 entries in page table

	[newphySP - 1] = -2;					//storing return value for child process

	ireturn;

endif;
